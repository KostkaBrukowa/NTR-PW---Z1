@using Microsoft.EntityFrameworkCore
@model Z01.Models.IndexViewModel
@{
    ViewData["Title"] = "Notes list";
    var currentParams = new Dictionary<string, string>
    {
        {"Filters.From", $"{Model.Filters.From:yyyy-MM-dd}"},
        {"Filters.To", $"{Model.Filters.To:yyyy-MM-dd}"},
        {"Filters.SelectedCategory", Model.Filters.SelectedCategory},
        {"Filters.Page", $"{Model.Filters.Page}"}
    };
}

<main class="main m-y-lg p-lg">
    <div class="error-container">
        <span class="error-label">@Model.Error</span>
    </div>
    <form asp-controller="Home" asp-action="Index" method="GET">
        <section class="main__filter-container p-y-md p-lg">
            <div class="main__date">
                <label for="from-date-note" class="m-r-sm">From: </label>
                <input class="form-control" asp-for="@Model.Filters.From">
            </div>
            <div class="main__date">
                <label for="to-date-note" class="m-r-sm">To: </label>
                <input class="form-control" asp-for="@Model.Filters.To">
            </div>
            <select asp-for="@Model.Filters.SelectedCategory" asp-items="Model.Categories">
                <option value="">--Choose a category--</option>
            </select>
            <input asp-for="Filters.Page"/>
            <input type="submit" class="btn btn-primary" value="Filter"/>
            <a asp-action="Index" class="btn btn-primary">Clear</a>
        </section>
    </form>

    <section class="main__notes-list m-y-md ">
        <div class="notes-list__row">
            <span>Date</span>
            <span>Title</span>
        </div>

        @if (Model.Notes.Count == 0)
        {
            <div class="p-lg">
                Ups... there is no note here. Click on <strong>New Note </strong>button to create one.
            </div>
        }

        @foreach (var note in Model.Notes)
        {
            <!-- var rowVersion = Encoding.ToBase64CharArray(note.RowVersion); -->
            <!-- var rowVersion = string.Join("", note.RowVersion); -->
            <div class="notes-list__row">
                <span>@($"{note.NoteDate:yyyy-MM-dd}")</span>
                <span>@note.Title</span>
                <div class="notes-list__button-wrapper">
                    <a asp-controller="Note" asp-action="Index" asp-route-id="@note.NoteID" class="btn bg-info">
                        Edit
                    </a>
                </div>
                <div class="notes-list__button-wrapper">
                    <form asp-controller="Note" asp-action="Remove" method="POST">
                        <input type="submit" value="Delete" class="btn bg-danger"/>
                        <input type="hidden" value="@note.NoteID" name="id"/>
                        <input type="hidden" asp-for="@note.RowVersion" name="rowVersion" />
                        <input type="hidden" value="@(currentParams["Filters.From"])" name="Filters.From"/>
                        <input type="hidden" value="@(currentParams["Filters.To"])" name="Filters.To"/>
                        <input type="hidden" value="@(currentParams["Filters.Page"])" name="Filters.Page"/>
                        <input type="hidden" value="@(currentParams["Filters.SelectedCategory"])" name="Filters.SelectedCategory"/>
                    </form>
                </div>
            </div>
        }
    </section>

    <section class="main__footer">
        <div>
            <a asp-controller="Note" asp-action="Index" class="btn btn-primary">New note</a>
        </div>
        <div>
            @{
                var prevPageParams = new Dictionary<string, string>(currentParams);
                var nextPageParams = new Dictionary<string, string>(currentParams);

                prevPageParams["Filters.Page"] = $"{int.Parse(currentParams["Filters.Page"]) - 1}";
                nextPageParams["Filters.Page"] = $"{int.Parse(currentParams["Filters.Page"]) + 1}";
            }
            <a
                asp-action="Index"
                asp-all-route-data="@prevPageParams"
                class="btn btn-primary @(Model.Filters.Page <= 0 ? "disabled" : "")">
                Prev page
            </a>
            <span class="m-x-sm">page @(Model.Filters.Page + 1) / @(Model.MaxPage + 1)</span>
            <a
                asp-action="Index"
                asp-all-route-data="@nextPageParams"
                class="btn btn-primary @(Model.Filters.Page >= Model.MaxPage ? "disabled" : "")">
                Next page
            </a>
        </div>
    </section>
</main>
